{"version":3,"file":"lib_index_js.cb898ad19c9994595bfb.js","mappings":";;;;;;;;;;;;;;;;;;;AAA+D;AACS;AACzB;AAC/C;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,mBAAmB,yDAAO,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gBAAgB;AAChB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAc,EAAE,kEAAgB;AAC/C,eAAe,yEAAgB;AAC/B;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://solutions/./lib/index.js"],"sourcesContent":["import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { INotebookTools, INotebookTracker } from '@jupyterlab/notebook';\nimport { TagTool } from '@jupyterlab/celltags';\nfunction create_remove_exercise(notebook, metadata) {\n    var lcells = notebook.selectedCells; // Cell<ICellModel>[]\n    if (lcells.length < 1) {\n        alert('Solution extension:  \\nPlease select some cells...');\n        return;\n    }\n    var cell = lcells[0];\n    if (metadata.checkApplied('first')) {\n        //remove_element(cell)\n        metadata.removeTag('first');\n        metadata.removeTag('hidden');\n        for (var i = 1; i < lcells.length; i++) {\n            var cell = lcells[i];\n            metadata.removeTag('hidden');\n        }\n        console.log('Removed');\n    }\n    else {\n        metadata.addTag('first');\n        metadata.addTag('hidden');\n        //add_element(cell)\n        for (var i = 1; i < lcells.length; i++) {\n            var cell = lcells[i];\n            metadata.addTag('hidden');\n        }\n        console.log('Added');\n    }\n}\n// function refresh_exercises(notebook: INotebookTools, metadata: TagTool) {\n//   var in_exercise = false;\n//   notebook.\n// }\nfunction init(app, notebook, tracker, settingRegistry) {\n    console.log('JupyterLab extension solutions is activated!!');\n    if (settingRegistry) {\n        settingRegistry\n            .load(plugin.id)\n            .then(settings => {\n            console.log('solutions settings loaded:', settings.composite);\n        })\n            .catch(reason => {\n            console.error('Failed to load settings for solutions.', reason);\n        });\n    }\n    var tool = new TagTool(tracker, app); // metadata tool\n    app.commands.addCommand(\"solutions:debug-log\", {\n        label: \"Debug Log\",\n        execute: () => {\n            console.log('CMD: Debug Log');\n            create_remove_exercise(notebook, tool);\n        }\n    });\n    app.commands.addKeyBinding({\n        command: 'solutions:debug-log',\n        args: {},\n        keys: ['\\\\', '\\\\'],\n        selector: '.jp-Notebook'\n    });\n    console.log(tool);\n}\n;\n/**\n * Initialization data for the solutions extension.\n */\nconst plugin = {\n    id: 'solutions:plugin',\n    autoStart: true,\n    requires: [INotebookTools, INotebookTracker],\n    optional: [ISettingRegistry],\n    activate: init\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}